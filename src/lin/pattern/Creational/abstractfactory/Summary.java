package lin.pattern.Creational.abstractfactory;

public class Summary {
    /**
     * 由于工厂模式中每个工厂只负责生产一类产品，导致系统中存在大量的工厂类，增加系统的开销，
     * 此时可以考虑将一些相关的产品组成一个“产品族”，由同一个工厂来生产
     */
    /**
     * 产品等级结构 产品族
     * 产品等级结构：产品等级结构即产品的继承结构，如抽象类是电视机，子类有海尔电视机、海信电视机、小米电视机，
     *      则抽象电视机与具体品牌的电视机之间构成一个产品等级结构，抽象电视机是父类，而具体品牌的电视机是子类。
     * 产品族： 在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品。
     *      如海尔电器厂生产的海尔电视机、海尔电冰箱、海尔洗衣机构成一个产品族。
     *
     *  当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构、属于不同类型的具体产品时，
     *  就可以使用抽象工厂模式。
     *  抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。抽象工厂模式与工厂模式的最大区别在于，
     *  工厂模式是针对一个产品等级结构，而抽象工厂模式需要面对多个产品等级结构，一个工厂等级机构可以负责多个不同产品等级结构中
     *  的产品对象的创建。
     *
     *  当一个工厂等级结构可以创建出属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂模式更为简单和高效。
     */
    /**
     * 抽象工厂模式 Abstract Factory Pattern：提供了一个创建一系列相关或相互依赖对象的接口，而无须指定他们具体的类。
     */
}
