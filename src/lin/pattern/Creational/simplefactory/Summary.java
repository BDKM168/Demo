package lin.pattern.Creational.simplefactory;

public class Summary {
    /**
     * 简单工厂模式：定义一个工厂类，它可以根据参数的不同返回不同类的实例，被创建的实例通常具有共同的父类。
     * 因为在简单工厂模式中用于创建实例的方法时静态方法，因此又被称为静态工厂方法模式，属于创建型模式。
     */
    /**
     * 角色： 工厂角色， 抽象产品角色 ， 具体产品角色。
     */
    /**
     * 主要优点：
     * 1.工厂类包含必要的判断逻辑，可以决定什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，
     * 而仅仅“消费产品”，简单工厂模式实现了对象创建和使用的分离。
     * 2.客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，
     * 3.通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。
     */
    /**
     * 主要缺点：
     * 1.由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受到影响。
     * 2.使用简单工厂模式势必会增加系统中类的个数，增加了整个系统的复杂度和理解难度。
     * 3.系统扩展困难，一天新增产品就不得不修改工厂逻辑，在产品类型较多时，可能会造成工厂逻辑过于复杂，不利于系统的和扩展和维护
     * 4. 简单工厂使用了静态工厂方法，造成工厂角色无法形成给予继承的等级结构。
     */
    /**
     * 1.工厂类负责创建的对象比较少，
     * 2.客户端只知道传入工厂类的参数，对于如何创建对象并不关心。
     */
}
