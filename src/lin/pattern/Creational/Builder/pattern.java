package lin.pattern.Creational.Builder;

public class pattern {
    /**
     * 建造者模式 BuilderPattern 将一个复杂对象的构建与它的表示分离，是的同样的构建过程可以创建不同的表示。
     */
    /**
     * 角色：
     * Builder 抽象建造者：它为创建一个产品Product 对象的各个部件指定抽象接口，该接口中一般声明两类方法，一类方法
     * 是buildPartX , 它们用于创建复杂对象的各个部件，另一类方法是getResult(), 它们用于返回复杂对象，Builder既可以是抽象类，
     * 也可以是接口。
     *
     * ConcreteBuilder 具体建造者，它实现了Builder接口，实现各个部件的具体构造方法和装配方法，定义并声明它所创建的复杂对象，
     * 也可以提供一个方法返回创建好复杂产品对象，
     *
     * Product 产品角色，它是被构建的复杂对象， 包含多个组成部件，具体建造者创建该产品的内部表示，并定义它的装配过程。
     *
     * Director 指挥者，指挥者又称导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在关联关系，可以在其
     * construct() 建造方法中调用建造者对象的部件构造与装配方法，完整复杂对象的建造。
     *
     * 复杂对象：简单来说，复杂对象是指那些包含过个成员属性的对象，这些成员属性也称为部件或零件，
     */
}
