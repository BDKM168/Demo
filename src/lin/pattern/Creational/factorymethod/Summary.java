package lin.pattern.Creational.factorymethod;


public class Summary {
    /**
     * 工厂模式总结：
     * 主要优点：
     * 1、在工厂模式中，工厂方法用来创建客户所需要的产品，同时还向客户隐藏了那种具体产品类将被实例化这一细节，
     *      用户只需要关心所需产品对应的工厂，无须关心创建的细节，甚至无须知道具体产品类的类名。
     * 2、基于工厂角色和产品角色的多态性设计师工厂模式的关键。它能够让工厂可以自主确定创建何种产品对象，
     *      而如何创建这个对象的细节则完全封装在具体工厂内部。工厂模式又被称为多态工厂模式，就是因为所有的具体工厂类都继承同一父类。
     * 3、在系统中加入新产品时，无须修改抽象工厂和抽象产品提供的接口，无须修改客户端，也无须修改其他具体产品类和具体工厂类，
     *      只需添加一个具体工厂类继承抽象工厂类，添加一个具体产品类实现产品接口。
     */
    /**
     * 缺点：
     * 1、在添加新产品时，需要添加具体产品类和具体工厂类，系统中类的个数成对增加，在一定程度上增加了系统的复杂性
     * 2、由于考虑到系统的可扩展性，需要引入抽象层，在客户端中云使用抽象层进行定义，增加了系统的抽象性和理解难度，
     *      且在实现时可能需要用到DOM、反射等技术，增加了系统的实现难度。
     */
    /**
     * 使用场景：
     * 1、客户端不知道它所需的对象类。在工厂模式中，客户端不需要知道具体产品类的类名，只需要知道所对应的工厂即可，
     *      具体的产品对象有具体工厂类创建，可将具体工厂类的类名存储在配置文件或数据库中。
     * 2、抽象工厂类通过其子类来指定创建哪个对象，在工厂模式中，对于抽象工厂类只需提供一个创建产品的接口，
     *      而又其子类来确定具体要创建的产品对象。利用面向对象的多态性和里氏替换原则，在程序的运行时，子类对象覆盖父类对象。
     */
    /**
     *
     */
}
