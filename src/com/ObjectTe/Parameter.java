package com.ObjectTe;

public class Parameter {

    private int x;

    /**
     * 形参和实参
     * 形参变量只有在被调用时才分配内存单元，在调用结束时，即可释放所分配的内存单元。因此形参只有在方法内部才有效
     * 方法调用结束返回主调方法后，则不能再使用该形参变量
     * <p>
     * 实参可以是常量，变量。表达式、方法等，无论实参是何种类型的量，在进行方法调用时，他们都必须具有确定的值。
     * 因此应预先赋值、输入等方法是实参获得确定值。
     * <p>
     * 实参和形参在数量、类型和顺序上应很严格一致，否则会发生类型不匹配错误。
     * <p>
     * 方法调用中发生的数据传送是单向的，只能是把实参的值传递给形参，而不能 把形参的值反向的传动给实参。
     * 因此在方法调用过程中，形参的值发型改变，而实参中的值不会变化。
     */

    public int add(int x) {
        x = x + 30;
        System.out.println("形参x的值 ： " + x);
        return x;
    }

    public static void main(String[] args) {
        int x = 50;
        System.out.println("调用add方法之前 x 的值 ：" + x);
        Parameter pa = new Parameter();
        System.out.println(pa.add(x));
    }

    /**
     * 注：
     * 1.对无参成员方法来说，是没有实际参数列表的。
     * 2.对带参数的成员方法来说，实参的个数、顺序、类型必须与形参的保持一致。
     * 3.实参也可以是表达式，但要注意类型保持一致。
     * 4.实参变量对形参变量的数据传递是“值传递”，即只能有实参传递给形参。
     *
     * 程序中执行到调用成员方法时，java把实参值复制到一个临时的存储区（栈）中，形参的任何修改都在栈中进行，
     * 当退出成员方法时，Java自动清除栈中的内容。
     *
     *  方法体中的局部变量
     *  在方法体内可以定义本方法所使用的变量，为局部变量。它的生存期与作用域都在本方法内。
     *  局部变量只能在本方法内有效或可见，离开本方法则这些变量将被自动释放。
     *
     *  在方法体内定义变量时，不能加修饰符。局部变量在使用前必须明确赋值，否则编译出错。
     *
     */


}
